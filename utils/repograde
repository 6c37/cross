#!/bin/sh
#
# wildefyr - 2016 (c) wtfpl
# update git packages if commit(s) are merged

usage() {
    printf '%s\n' "usage: $(basename $0) <repository>"
    exit 1
}

gitPortsUsage() {
    printf '%s\n' "$REPOSITORY/.gitports does not exist or is empty." >&2 
    printf '%s\n' "Please create a file naming the ports you wish to update." >&2 
    exit 1
}

PORTSDIR=${PORTSDIR:-/usr/ports}
SOURCEDIR=${SOURCEDIR:-$(cat /etc/pkgmk.conf | grep SOURCE | cut -d\" -f 2)}
PACKAGELIST=${PACKAGELIST:-/tmp/packagelist}

# clean $PACKAGELIST
test -f $PACKAGELIST && rm $PACKAGELIST

test -z $1 && usage
REPOSITORY=$1
test -d $PORTSDIR/$REPOSITORY || usage
REPOSITORY="$PORTSDIR/$REPOSITORY"
test -f $REPOSITORY/.gitports || gitPortsUsage
# TODO: check each package for 'version=git' and 'checkout= / git checkout '
PORTNUM=$(cat $REPOSITORY/.gitports | wc -l)
test $PORTNUM -eq 0 && gitPortsUsage

for COUNTER in $(seq $PORTNUM); do
    PORT=$(cat $REPOSITORY/.gitports | sed "$COUNTER!d" | cut -d\  -f 1)
    COMMIT=$(cat $REPOSITORY/.gitports | sed "$COUNTER!d" | cut -d\  -f 2)

	if [ -d $SOURCEDIR/$PORT ]; then
        cd $SOURCEDIR/$PORT

        # add a post-merge script to the git repo
        # TODO: check $PACKAGELIST and if not equal to current $PACKAGELIST,
        # update the post-merge hook
        if [ ! -f ./.git/hooks/post-merge ]; then
            printf '%s\n' "Adding post-merge script for $PORT."
            cat > ./.git/hooks/post-merge << EOTEMPLATE
#!/bin/sh
#
# after a merge is succesful, add package to $PACKAGELIST

printf '%s' "$PORT" >> $PACKAGELIST
EOTEMPLATE
            chmod +x ./.git/hooks/post-merge
        fi

        printf '%s\n' "$PORT:"
        git pull

        if [ "$PORT" != "$COMMIT" ]; then
            git checkout $COMMIT
        fi
        # TODO: clone the repository if not found
	fi

done

if [ -f $PACKAGELIST ]; then
    for COUNTER in $(seq $(cat $PACKAGELIST | wc -w)); do
        PACKAGE=$(cat $PACKAGELIST | sed "$COUNTER!d")

        cd $REPOSITORY/$PACKAGE

        PACKAGEINSTALLED=0
        while [ $PACKAGEINSTALLED -eq 0 ]; do
            pkgmk -f

            # if md5sum is mismatched, update md5sum
            if [ $? -eq 6 ]; then
                pkgmk -um
                if [ $? -gt 1 ]; then
                    continue
                fi

                git add .
                git commit -m "$PACKAGE: Update md5sum."
                if [ -z $GITPUSH ]; then
                    GITPUSH=1                    
                fi
            # if footprint is mismatched, update footprint
            elif [ $? -eq 7 ]; then
                pkgmk -uf
                if [ $? -gt 1 ]; then
                    continue
                fi

                git add .
                git commit -m "$PACKAGE: Update footprint."
                if [ -z $GITPUSH ]; then
                    GITPUSH=1                    
                fi

                # install updated package with new footprint
                pkgmk 
                if [ $? -eq 0 ]; then
                    PACKAGEINSTALLED=1
                fi
            fi
        done
    done
    
    if [ ! -z $GITPUSH ]; then
        cd $REPOSITORY
        printf '%s\n' "Pushing new $REPOSITORY updates:"
        git push
    fi
fi 
